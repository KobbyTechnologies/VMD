What is an Intent in Android?

    An Intent is basically a message that is passed between components (such as Activities, Services, Broadcast Receivers, and Content Providers).So, it is almost equivalent to parameters passed to API calls. The fundamental differences between API calls and invoking components via intents are:

    API calls are synchronous while intent-based invocations are asynchronous.
    API calls are compile-time binding while intent-based calls are run-time binding.
    To listen for an broadcast intent (like the phone ringing, or an SMS is received), 
    you implement a broadcast receiver, which will be passed the intent. To declare that you can handle another's app intent like "take picture", you declare an intent filter in your app's manifest file.
    If you want to fire off an intent to do something, like pop up the dialer, you fire off an intent saying you will.

    An Intent provides a facility for performing late runtime binding between the code in different applications.



How can you deal with the plethora of different screen resolutions and screen sizes out there? 
What unit has been introduced to simplify positioning and sizing elements? How do you deal with images?

    Handling different screen sizes is very important also for designers, since they have to prepare graphics for each density group. Sometimes it is good to prepare different layouts for phones and tablets, or even portrait and landscape orientation.

    When possible, images in SVG format should be used. They can be scaled without losing quality and they take less space than the same image in different sizes. Both Android and iOS support using SVG images.

What is the difference between Handler vs AsyncTask vs Thread?

    The Handler class can be used to register to a thread and provides a simple channel to send data to this thread. A Handler allows you communicate back with the UI thread from other background thread.
    The AsyncTask class encapsulates the creation of a background process and the synchronization with the main thread. It also supports reporting progress of the running tasks.
    And a Thread is basically the core element of multithreading which a developer can use with the following disadvantage:
    Handle synchronization with the main thread if you post back results to the user interface
    No default for canceling the thread
    No default thread pooling
    No default for handling configuration changes in Android

What is the difference between Activity and Context?

    Context is the Base Object. So every Activity same as Application derives from Context. This means that every Activity and every Application IS a Context.
    An Application context lasts, as long as your app is alive, while
    the Activity context dies with your Activity (it is not valid after onDestroy() of that Activity).
    So if you need the Context across Activities (i.e. in a Singleton) you will be better off using an Application context.